﻿adb forward tcp:5005 jdwp:20058 , 让AS可以attach上这个端口
adb shell am start -D -n pkgname/.activity

JDB 的使用方式

上面说了这么多，其实都是为了讲 JDB 的使用原理做的铺垫，JDB 其实是 JDWP 协议中所讲的 Debugger，
它运行在 develop machine 上面，它和移动设备上面的 App VMs 通过 JDWP 协议来通信，
JDB 一般位于你的 JDK 安装目录下面，可以直接运行，因为 JDB 和移动设备必须通过 ADB 来沟通，所以在 Android 上面使用 JDB 之前必须做一些配置：

通过 adb jdwp 列出移动设备上面可以执行 JDWP 协议的进程 ID。
通过 adb forward tcp:123456 jdwp:pid (第一步所得到的 PID )设置使用 123456 端口来和移动设备上面的App VMs（其实是 adbd）来通信。
执行 jdb -attach localhost:123456 将 jdb attach 到本机的 123456 端口。
这样一个 JDB 到移动设备 App VMs 的连接就成了，可以使用 JDB 提供的各种命令来和 App VMs 交互。
jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700

---------------------------------------------------------------------------------------------------------------------------------------------
从启动开始，让ida attach apk的正确姿势是（不需要借助ddms，app的manifest必须是true或系统属性ro.debuggable=1）：
am start -D -n xxx(包名/MainActivity)
adb forward tcp:port jdwp:pid
ida debugger attach 进程，点击continue process按钮
jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=port

----------------------------------------------------------------------------------------------------------------------------------------------
#ida调试下断加载JNI_OnLoad导出函数art::JavaVMExt::LoadNativeLibrary(string， classloader， string);
5.0是在art/runtime/jni_internal.cc
6.0实在art/runtime/java_vm_ext.cc
首先通过string 可以获得要加载的库，5.0调用JNI_Onload下断的点
libart.so:B4DD560E BLX             R7 ; // 对应文件偏移1e660e

#ida调试下断linker调用init_array 导出函数CallArray("DT_INIT_ARRAY", init_array, init_array_count, false);
#ida调试下断linker调用pre_init_array 导出函数CallArray("DT_PREINIT_ARRAY", preinit_array, preinit_array_count, false);